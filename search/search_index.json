{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AI Applied Education","text":""},{"location":"#the-ai-applied-program","title":"The AI Applied Program","text":"<ul> <li> <p> Unit I: Introduction to coding tools </p> <ul> <li>1.1 Introduction to Git &amp; GitHub</li> <li>1.2 Introduction to Python</li> <li>1.3 Introduction to Pandas</li> <li>1.4 Practice with Python and GitHub</li> <li>1.5 Dialogue with a Professional: Programming in a Job</li> </ul> </li> <li> <p> Unit II: Introduction to Data Science </p> <ul> <li>2.1 Current Context and Application of Mathematical Models in AI</li> <li>2.2 Introduction to Visualization and Descriptive Statistics</li> <li>2.3 Introduction to Exploratory Data Analysis (EDA)</li> <li>2.4 Data Cleaning and Processing</li> <li>2.5 Dialogue with a Professional: Data Science in a Job</li> </ul> </li> <li> <p> Unit III: Introduction to Machine learning </p> <ul> <li>3.1 Natural Language Processing Techniques</li> <li>3.2 Classification and Regression Models: Supervised Learning</li> <li>3.3 Pattern Identification in Data: Unsupervised Learning Techniques</li> <li>3.4 Review of Learned Concepts and Q&amp;A</li> <li>3.5 Dialogue with a Professional: Artificial Intelligence in the Job World</li> </ul> </li> <li> <p> Unit IV: Final project </p> <ul> <li>4.1 Teamwork and Project Planning</li> <li>4.2 Exploratory Data Analysis (EDA) and Data Cleaning</li> <li>4.3 Training and Application of the Mathematical Model</li> <li>4.4 Preparation for Data Presentation and Visualization</li> <li>4.5 Final Course Project Presentation (TFC)</li> </ul> </li> </ul>"},{"location":"#recommended-links","title":"Recommended links","text":"<ul> <li> Python courses with certification</li> <li> Data Science courses with certification</li> <li> Python cheatsheet</li> <li> Data case studies</li> </ul>"},{"location":"program/contact/","title":"Contact","text":"<p>Hi I'm Carlos Grande</p> <ul> <li> carlosgranden@gmail.com</li> <li> Github profile</li> <li> Personal site</li> <li> Linkedin</li> </ul>"},{"location":"program/overview/","title":"Overview scope of the program","text":""},{"location":"program/overview/#the-data-science-ecosystem","title":"The Data Science ecosystem","text":"<p>Data Science is the art of using data to understand, predict, and solve real-world problems, making it an invaluable tool across all fields for informed decision-making and innovative solutions.</p> <p></p> <ul> <li>Domain and Fundamental knowledge: Understanding and expertise in specific subject areas (domains) along with foundational knowledge necessary to comprehend and engage with various disciplines and concepts.</li> <li>Computer Science: The study of algorithms, data structures, and computational systems for solving problems and processing information using computers.</li> <li>Math &amp; statistics: The discipline that deals with the analysis, interpretation, and manipulation of numerical data, patterns, and relationships, relying on mathematical principles and methodologies.</li> </ul>"},{"location":"program/overview/#the-data-jobsroles-ecosystem","title":"The data jobs/roles ecosystem","text":"<p>Data jobs are becoming increasingly influential in every domain of knowledge due to the widespread adoption of data-driven decision-making. As data-driven approaches offer valuable insights and predictions, professionals with data skills can extract valuable information from data</p> <p></p> <ul> <li>Business Analyst: Utilizes data to determine project requirements and provides recommendations and reports to stakeholders, focusing on tactical aspects rather than strategic ones.</li> <li>Data Architects and Data Engineers: Data architects visualize framework requirements, while data engineers build the digital framework to create a solution.</li> <li>Data Analyst: Analyzes collected data to ensure usefulness and comprehensiveness, interpreting data with strong visualization skills for businesses.</li> <li>Data Scientist: Combines technical problem-solving skills with natural curiosity to develop ML models and detect patterns and relationships in copious amounts of data.</li> <li>Machine Learning Engineer: Integrates software engineering with machine modeling abilities, determining the appropriate model and data for ML applications.</li> <li>Business Intelligence Engineer: Creates unique data visualizations, defining metrics and charts beneficial for business decisions, playing a crucial role in specialized data science models.</li> </ul>"},{"location":"program/overview/#the-software-ecosystem","title":"The Software ecosystem","text":"<p>In this course, we prioritize easy-to-learn and widely used software solutions among the thousands of programming languages, frameworks, and distributions available.</p> <pre><code>graph TD\n    PC{Python\\n cloud} -.-&gt;|connects| GC[\"\u2705 Google \\n Collab\"];\n    G[\"\u2601 Google VM\"] --&gt;|has| PC;\n    YC[\"\ud83d\udcbb Your computer\"] --&gt;|has*| AP{Anaconda\\n Python};\n    YC --&gt;|has*| PL{Python\\n local};\n    AP -.-&gt;|connects| APJN[\"\u2705 Jupyter \\n notebook\"];\n    AP -.-&gt;|connects| APC[\"\u2705 Console:\\n Anaconda\\n promt\"];\n    AP -.-&gt;|connects| API[IDE:\\n Spyder];\n    PL -.-&gt;|connects| F[IDE:\\n VSCode,\\n Pycharm];\n    PL -.-&gt;|connects| YCC[\"\u2705 Console:\\n cmd,\\n powershell\"];\n    GIT -.-&gt;|connects| YCB[\"\u2705 Console:\\n Git Bash\"];\n    YC --&gt;|has*| GIT[\"\u2705 GIT\"];\n    GT[\"\u2601 GITHUB\"] -.-&gt;|connects| GIT;</code></pre>"},{"location":"program/overview/#glossary","title":"Glossary","text":"<ul> <li>Google Collab: A free cloud-based platform that allows to write and execute Python code in interactive notebooks using Google's resources.</li> <li>Anaconda: A user-friendly Python distribution that bundles essential libraries and tools for data science and machine learning.</li> <li>Python: A versatile programming language widely used for various tasks, including data analysis, web development, and automation.</li> <li>Jupyter notebook: An interactive environment that lets users write, execute, and visualize code, making it ideal for data exploration and sharing.</li> <li>IDE: A software application that provides tools and features to write, edit, and debug code efficiently.</li> <li>GIT: A version control system that allows to track changes in their code, collaborate with others, and manage code development effectively.</li> <li>Github: A web-based platform that uses GIT for version control and provides a space to store, share, and collaborate on their code projects.</li> <li>Console: A text-based interface in an operating system that allows users to interact with the computer through commands, performing tasks such as file navigation, program execution, and system configuration.</li> </ul>"},{"location":"program/overview/#the-ml-ecosystem","title":"The ML ecosystem","text":"<p>In this course, we focus on explaining easily understandable supervised and unsupervised machine learning models, as they are commonly used and provide a solid foundation for learning the basics of machine learning.</p> <pre><code>graph TD\n    ML[ML models] --&gt;|Labeled data| SML[\"\u2705 Supervised models\"];\n    ML --&gt;|Unlabeled data| UML[\"\u2705 Unsupervised models\"];\n    ML --&gt;|Time data| TS[\"Time series\"];\n    ML --&gt;|Reward| RL[\"Reinforcement learning\"];\n    SML --&gt;|Continuous var| MLR[Regression];\n    SML --&gt;|Categorical var| MLC[Classification];\n    UML --&gt; UMLC[Clustering];\n    UML --&gt; UMLDR[Dimensionality reduction];\n    MLR --&gt; LR{Linear\\n regresion};\n    MLR --&gt; LRM{Multilinear\\n regresion};\n    MLC --&gt; KNN{KNN};\n    MLC --&gt; DC{Decision\\n trees};\n    MLC --&gt; RF{Random\\n forest};\n    UMLC --&gt; KMNS{K-means};\n    UMLDR --&gt; PCA{PCA};</code></pre>"},{"location":"program/requirements/","title":"Requirements","text":"<p>In order to fully engage with the course material and complete the exercises, it is essential to have the necessary software installed on your system. Follow these step-by-step tutorials, to ensure you have the foundation to succeed in the course.</p> <p>The required tools encompass:</p> <p> Markdown GitHub account Git Google Colab Anaconda distribution Visual Studio Code (optionally)</p>"},{"location":"program/requirements/#markdown-lightweight-language","title":"Markdown lightweight language","text":"<p>Markdown is a simple way to format documentation, readme files, and notes. Markdown simplifies text styling and organization.</p> <p>Markdown knowledge is required for the program. While not covered in the course, it's vital for creating clear documentation. Please refer to the Markdown cheatsheet to learn the basics.</p>"},{"location":"program/requirements/#github","title":"Github","text":"<p>GitHub is a platform that helps you colaborate and work on projects. It's like a digital space where people can store, share, and manage their code and project files.</p> <p>GitHub allows you to create repositories (folders) to store your projects. Each repository contains all the files, code, and resources related to a specific project. It's a great place to keep track of your work and colaborate with others.</p>"},{"location":"program/requirements/#1-create-an-account","title":"1. Create an account","text":"<p>To create a github account go to Github.com, and press <code>Sign up</code>.</p> <p></p> <p>Then follow the instructions on the site and finish creating your account.</p>"},{"location":"program/requirements/#git","title":"Git","text":"Imagine Git as a time-traveling tool for your computer files. It keeps a record of every change you make, so if you accidentally mess something up, you can go back in time to fix it. It's like having an \"undo\" button for all your coding adventures."},{"location":"program/requirements/#1-installing-git","title":"1. Installing Git","text":"<ul> <li>Go to the git official website.</li> <li>Select the 64 bit standalone installer, and download the file. The file should be named like <code>Git-x.xx.x.x-64-bit.exe</code>.</li> <li>Select next in all the steps and finish the installation.</li> <li>Once is installed launch Git Bash an run the following command. You should see an output like this.     <pre><code>git --version\n</code></pre> <pre><code>Git-2.41.0.3-64-bit.exe\n</code></pre></li> </ul> <p>Congratulations you have successfully installed Git in your computer.</p>"},{"location":"program/requirements/#2-linking-git-to-your-github-profile","title":"2. Linking Git to your Github profile","text":"<ul> <li>Launch Git Bash console.</li> <li>Add your user name and your email by running these commands     <pre><code>git config --global user.username \"your-user-name\"\ngit config --global user.email \"your_email@example.com\"\n</code></pre></li> </ul>"},{"location":"program/requirements/#google-colab","title":"Google colab","text":"<p>Google Colab is an online platform that allows you to write and execute Python code in a colaborative and interactive environment.</p> <p>It's especially useful for data analysis, machine learning, and research projects. You can create and share notebooks that contain code, text, images, and more.</p> <p>Gmail account</p> <p>To use Google Colab, you need a Google account (such as a Gmail account). You can access Colab through a web browser without any installation. It provides a virtual machine with necessary libraries pre-installed, eliminating the need for local setup.</p>"},{"location":"program/requirements/#21-create-a-new-notebook","title":"2.1 Create a new notebook","text":"<ul> <li> <p>Create a New Notebook: Click here to create a new notebook and start coding.</p> </li> <li> <p>Connect the Notebook: A new notebook will be created with an empty code cell. Make sure you connect the notebook to a running environment. You can start running the code once you have a machine assigned. </p> </li> <li> <p>Adding Code: You can add code cells by clicking the \"+ Code\" button above the notebook or pressing the \"+ Code\" option in the \"Insert\" menu.</p> </li> <li> <p>Adding Text: You can add text cells by clicking the \"+ Text\" button above the notebook or pressing the \"+ Text\" option in the \"Insert\" menu. Text cells allow you to add explanations, notes, and Markdown-formatted text.</p> </li> <li> <p>Running Code: To run a code cell, click the play button (\"Run\") next to the cell, or press Shift + Enter. The output of the code will be displayed below the cell.</p> </li> <li> <p>Saving and Renaming: Your notebook will be automatically saved to your Google Drive. To rename the notebook, click on the notebook name at the top-left corner and provide a new name.</p> </li> <li> <p>Sharing and colaboration: You can share the notebook with others by clicking the \"Share\" button at the top-right corner. You can provide view or edit access, and others can colaborate in real-time.</p> </li> <li> <p>Closing and Exiting: When you're done working on the notebook, you can close the browser tab or go to \"File\" &gt; \"Close\" to close the notebook.</p> </li> </ul>"},{"location":"program/requirements/#22-access-to-a-github-repository","title":"2.2 Access to a github repository","text":"<ul> <li> <p>Open Google Colab: Go to the Google Colab website  .</p> </li> <li> <p>Choose GitHub Tab: Click on the \"GitHub\" tab on the \"Welcome to Colaboratory\" screen.</p> <p></p> </li> <li> <p>Enter Repository URL: In the \"Enter a GitHub URL or search by organization or user\" field, paste the URL of the GitHub repository that contains the notebook you want to open.</p> </li> <li> <p>Search and Select Notebook: Google Colab will display a list of notebooks available in the repository. Search for the notebook you want to open and click on it.</p> </li> <li> <p>Open the Notebook: The selected notebook will be opened in Google Colab. You can now view, edit, and run the notebook as needed.</p> </li> <li> <p>Connect to a Runtime: If necessary, connect the notebook to a runtime by clicking the \"Connect\" button at the top-right corner of the notebook. This will allow you to run the code cells.</p> </li> <li> <p>Run and Modify Code: You can now run code cells, modify the notebook, and work on the content as if it were a regular Google Colab notebook.</p> </li> <li> <p>Save to Drive: Any changes you make to the notebook will be saved to your Google Drive.</p> </li> </ul>"},{"location":"program/requirements/#anaconda-distribution","title":"Anaconda distribution","text":"<p>Anaconda is a platform that simplifies Python programming by providing tools and libraries for data science, analysis, and coding tasks.</p> <p>You can follow the official instructions at Anaconda documentation.</p> <ul> <li> <p>Download Anaconda: go to the Anaconda website. Click on the \"Download\" for windows button.</p> </li> <li> <p>Run Installer: locate the downloaded installer file (usually named something like \"Anaconda3-2023.07-1-Windows-x86_64.exe\") and double-click on it to run the installer.</p> </li> <li> <p>Setup Wizard: follow the prompts in the setup wizard. You can leave most of the default settings as they are. However, make sure to check the box that says \"Add Anaconda to my PATH environment variable.\" This will allow you to use Anaconda from the command line.</p> </li> <li> <p>Install Anaconda: click the \"Install\" button to start the installation process. The installer will copy files to your computer.</p> </li> <li> <p>Start Anaconda Navigator: after the installation, you can start Anaconda Navigator by clicking the \"Next\" button on the completion screen.</p> </li> <li> <p>Launch Jupyter Lab: Open Anaconda Navigator, and launch Jupyter lab.</p> <p></p> </li> </ul> <p>Congratulations! You've successfully installed Anaconda on your Windows computer. </p>"},{"location":"program/requirements/#vs-code-optional","title":"VS Code (Optional)","text":"<p>Visual Studio Code is a free code editor developed by Microsoft. It's widely used for coding and programming tasks.</p> <ul> <li> <p>Download VS Code: go to the Visual Studio Code website. Click on the \"Download for Windows\" button.</p> </li> <li> <p>Run Installer: locate the downloaded installer file (usually named something like \"VSCodeSetup.exe\") and double-click on it to run the installer.</p> </li> <li> <p>Choose Additional Tasks: during the installation, you'll be prompted to choose additional tasks. You can choose to associate file types with VS Code, create a desktop icon, and more.</p> </li> <li> <p>Start VS Code: after the installation, you can start Visual Studio Code by clicking the \"Start\" button on your Windows taskbar and searching for \"Visual Studio Code\" in the search bar. Click on the application to launch it.</p> </li> <li> <p>Start Coding: you're now ready to start coding with Visual Studio Code. You can open files, create new projects, and install extensions to enhance your coding experience.</p> </li> </ul> <p>Congratulations! You've successfully installed Visual Studio Code on your Windows computer.</p>"},{"location":"program/students/","title":"Students directory","text":"Name Email Github name email github-link Roc\u00edo Arnaiz Illescas rocio.arnaiz.illescas@gmail.com github.com/Rrrrrroar"},{"location":"program/unit-1/11-introduction-to-git-and-github/","title":"Git &amp; Github","text":"<p>Visit the software ecosystem to have an overview of the software you are going to use in this course.</p>"},{"location":"program/unit-1/11-introduction-to-git-and-github/#1-consoles","title":"1. Consoles","text":"A console is similar to a file explorer, but instead of a visual interface, it's a text-based interface on a computer. It allows you to enter commands for tasks like navigating, copying, and moving files.  <p>A file explorer offers a graphical interface for navigating files and folders using buttons and icons, while a console provides a text-based interface where commands are typed to interact with the file system. They serve distinct purposes, with a file explorer being visual and user-friendly, and a console offering command-driven control and automation.</p>"},{"location":"program/unit-1/11-introduction-to-git-and-github/#12-console-commands","title":"1.2 Console commands","text":"Command Example Action ls <code>ls</code>  {<code>-a</code>, <code>-l</code>} List the current directory files cd DIR <code>cd \"My documents\"</code> Change directory cd .. <code>cd ..</code> Back to the upper directory one level clear <code>clear</code> Clean console history <code>history</code> Shows latest commands tab - Show available options, autocomplete Up Arrow - Extract last command ctrl + l - Scroll to active line ctrl + r - Search in the command history ctrl + c - Stop &amp; kill running command Advanced commands Command Example Action pwd <code>pwd</code> Print working directory path cat FILE <code>cat README.md</code> Shows the contents of the file touch FILE <code>touch README.md</code> Creates an empty file mkdir FOLDER <code>mkdir \"My documents\"</code> Create a new folder on actual directory mv FILE DIR <code>mv notebook.ipynb \"My documents\"</code> Move file to a new directory cp FILE DIR <code>cp notebook.ipynb \"My documents\"</code> Move file to a new directory rm FILE <code>rm notebook.ipynb</code> Remove selected file rm -r FOLDER <code>rm -r \"My documents\"</code> Remove a folder and all the files inside find --name FILE <code>find --name README.md\"</code> Search for a file in the directory and sublevels"},{"location":"program/unit-1/11-introduction-to-git-and-github/#2-git-github","title":"2. Git &amp; Github","text":"<p>Think of Git like a notebook that tracks all the changes you make to your writing, letting you go back and see every draft. GitHub is like a library where you can keep your notebooks, and others can borrow them, read your writing, make suggestions, and even work on their own versions of the same story.</p>"},{"location":"program/unit-1/11-introduction-to-git-and-github/#21-git-commands","title":"2.1 Git commands","text":"Command Example Action git clone REPO-NAME <code>git clone https://github.com/user/repo.git</code> Clone a repository in the local computer git pull <code>git pull</code> Description git status <code>git status</code> Description git fetch <code>git fetch</code> Description git add <code>git add .</code> ; <code>git add *</code> Description git commit -m \"MESSAGE\" <code>git commit -m \"update: new section readme\"</code> Description git push <code>git push</code>; <code>git push origin main</code> Description git reset --soft <code>git reset --soft</code> Keep files but destroy the commits staged git reset --hard <code>git reset --hard</code> Destroy changes and go to the remote state Git branching commands Command Example Action git switch BRANCH <code>git switch dev-carlos</code> Switch to the selected branch git switch -c BRANCH <code>git switch -c dev-carlos</code> Create new branch and switch to that branch git branch <code>git branch</code> (-a- ; -r) Shows local and remote branches git remote prune origin <code>git remote prune origin</code> Update remote branchs in local memory"},{"location":"program/unit-1/11-introduction-to-git-and-github/#22-what-is-git","title":"2.2 What is Git","text":"Imagine Git as a time-traveling tool for your computer files. It keeps a record of every change you make, so if you accidentally mess something up, you can go back in time to fix it. It's like having an \"undo\" button for all your coding adventures.  Example: Clonning, committing, and pushing changes <p>In this example, you'll learn how to clone a repository, create a README.md file, commit changes, and push them to GitHub.</p> <ol> <li>Clone the Repository:</li> <li>Open your console (Git Bash, Command Prompt, etc.), and navigate to the directory where you want to clone the repository.</li> <li>Run the following command to clone the repository:     <pre><code>git clone &lt;repository_url&gt;\n</code></pre></li> <li> <p>Change into the cloned repository's directory:     <pre><code>cd &lt;repository_name&gt;\n</code></pre></p> </li> <li> <p>Create a README.md File by running this command.     <pre><code>touch README.md\n</code></pre></p> </li> <li>Commit the Changes by adding the <code>README.md</code> file to the staging area:     <pre><code>git add README.md\n</code></pre></li> <li>Commit the changes with a meaningful commit message:     <pre><code>git commit -m \"Add README.md\"\n</code></pre></li> <li>Push Changes to Remote Repository:     <pre><code>git push origin main\n</code></pre></li> </ol> <p>That's it! You have successfully cloned a repository, created a <code>README.md</code> file, committed your changes, and pushed them to the remote repository.</p>"},{"location":"program/unit-1/11-introduction-to-git-and-github/#23-what-is-github","title":"2.3 What is Github","text":"GitHub is like a library for your computer code. It lets you store your code online, so you can access it from anywhere. You can also invite friends to help you work on your code and keep track of all the changes you make.  <p>GitHub is a platform where people store and colaborate on code for software projects. It's like a digital space where programmers can work together on coding projects.</p> <p>A repository in GitHub is like a digital folder where you can store and manage your projects, including code, files, and resources. It's a space to colaborate, keep track of changes, and showcase your work. To create a repository you can follow the official documentation.</p> <pre><code>graph TD\n    G[Github] --&gt; PP[\"\ud83d\udcf7\\nDeveloper\\nprofile\"];\n    G --&gt; RP[(\"\u2338 Your\\nrepositories\")];\n    G --&gt; PR[(\"\u2338 Public\\nrepositories\")];</code></pre>"},{"location":"program/unit-1/11-introduction-to-git-and-github/#24-what-is-a-repository","title":"2.4 What is a repository","text":"A repository is like a folder where you store files for a project. It holds your work, tracks changes, and allows others to colaborate on the project. It's like a digital toolbox.  <p>A repository can be either local, stored on your computer, or remote, stored on a server like Github. They are linked by using version control systems like Git. Local repositories store your work offline, while remote repositories, often hosted on platforms like GitHub, enable colaboration and backup by syncing changes between local and remote versions.</p> <pre><code>graph TD\n    G[\"\ud83c\udd76\\nGithub\"] --&gt; UR[\"\ud83d\udc69\u200d\ud83d\udcbbUser profile\"];\n    UR --&gt; RR[(\"\u29e0 Remote\\nrepository\")];\n    RR --&gt;|pull| LG1[\"\u29e0\\nLocal GIT\"];\n    LG1 --&gt;|push| RR;\n    LG1 --&gt;|pull| WS1[\"\ud83d\udc69\u200d\ud83d\udcbb\\nLocal computer 1\"];\n    WS1 --&gt;|commit| LG1;\n    WS1 --&gt; LR1[(\"\ud83d\uddbf\\nLocal\\nrepository\")];\n    RR --&gt;|pull| LG2[\"\u29e0\\nLocal GIT\"];\n    LG2 --&gt;|push| RR;\n    LG2 --&gt;|pull| WS2[\"\ud83d\udc68\u200d\ud83d\udcbb\\nLocal computer 2\"];\n    WS2 --&gt;|commit| LG2;\n    WS2 --&gt; LR2[(\"\ud83d\uddbf\\nLocal\\nrepository\")];\n    RR --&gt;|pull| LG3[\"\u29e0\\nLocal GIT\"];\n    LG3 --&gt;|push| RR;\n    LG3 --&gt;|pull| WS3[\"\ud83d\udc69\u200d\ud83d\udcbb\\nLocal computer 3\"];\n    WS3 --&gt;|commit| LG3;\n    WS3 --&gt; LR3[(\"\ud83d\uddbf\\nLocal\\nrepository\")]</code></pre> Example: creating a new repository in Github <p>This example shows how to create a new repository on GitHub.</p> <ol> <li> <p>In the upper-right corner of any page, use the  drop-down menu, and select New repository.</p> <p></p> </li> <li> <p>Choose a name for your repository. This name will be part of the repository's URL and should be descriptive.</p> <p></p> </li> <li> <p>Add an optional description to provide more information about the repository. You can always add it later. Example:</p> <p>A repository exploring Reinforcement Learning methods in Python.</p> </li> <li> <p>Select the repository's visibility: Public or private.</p> </li> <li>Choose whether to initialize the repository with a README file. This is recommended, as it provides a place to describe your project.</li> <li>If needed, you can choose to add a .gitignore file (specifies files/folders that should not be tracked by Git) and a license to your repository.</li> <li>Click Create repository.</li> </ol> <p>Congratulations you have created your new repository.</p>"},{"location":"program/unit-1/11-introduction-to-git-and-github/#25-what-is-a-branch","title":"2.5 What is a branch","text":"A branch is like a separate copy of your repository where you can make changes without affecting the main version. It's like having a playground to experiment and work on new features before adding them to the main project.  <pre><code>graph LR\n    subgraph \"Branch main\"\n    direction LR\n    A((\"#A\")) --&gt;|commit| B((\"#B\"));\n    B --&gt;|commit| C((\"#C\"));\n    C --&gt;|commit| D((\"#D\"));\n    D --&gt;|commit| E((\"#E\"));\n    E --&gt;|commit| F((\"#F\"));\n    end\n    C --&gt;|\"switch -c\"| B2C;\n    B2E --&gt;|Pull request| E;\n    subgraph \"Branch dev-jorge\"\n    B1B((\"#B\")) --&gt;|commit| B1C((\"#C'\"));\n    end\n    subgraph \"Branch dev-marta\"\n    B2C((\"#C\")) --&gt;|commit| B2D((\"#D'\"));\n    B2D --&gt;|commit| B2E((\"#E'\"));\n    end\n    B --&gt;|\"switch -c\"| B1B;\n    B1C --&gt;|Pull request| D;</code></pre> Example: creating and switching branches <p>This example shows a common workflow to create a new branch <code>dev-new-branch</code> from the original files of <code>main</code> branch.</p> <ol> <li>Clone repository. <pre><code>git clone https://github.com/charlstown/ai-applied-education.git\n</code></pre></li> <li>Check branch. By default it shows local branches, you can add the flag <code>-r</code> to show only remote branches or <code>-a</code> to show all.     <pre><code>git branch -a\n</code></pre> <pre><code>remotes/origin/dev-marta\nremotes/origin/dev-juan\n* main\n</code></pre></li> <li>Check dev-marta branch. <pre><code>git switch dev-marta\ngit pull\n</code></pre> output<pre><code>Switched to branch 'dev-marta'\nYour branch is behind 'origin/main' by 23 commits, and can be fast-forwarded.\n(use \"git pull\" to update your local branch)\n\nAlready up to date.\n</code></pre></li> <li>New branch from main. Change to main branch, then create a new branch with the files from main.     <pre><code>git switch main\ngit pull\ngit switch -c dev-new-branch\n</code></pre></li> <li>Push new branch. Push the new branch from local repository to remote repository.     <pre><code>git push \u2013set-upstream origin dev-new-branch\n</code></pre></li> </ol> <p>Now you can start working on your branch without iterfering the <code>main</code> branch.</p>"},{"location":"program/unit-1/11-introduction-to-git-and-github/#3-test-your-skills","title":"3. Test your skills","text":""},{"location":"program/unit-1/11-introduction-to-git-and-github/#31-create-a-profile-repository","title":"3.1 Create a profile repository","text":"<p>The profile README is a repository where you can share information about yourself with the community on GitHub.com by creating a profile README. GitHub shows your profile README at the top of your profile page. Check the oficial documentation of Github profile README.</p> <ul> <li> <p>In the upper-right corner of any page, use the  drop-down menu, and select New repository.</p> <p></p> </li> <li> <p>Under \"Repository name\", type a repository name that matches your GitHub username. For example, if your username is \"octocat\", the repository name must be \"octocat\".</p> </li> <li>Optionally, in the \"Description\" field, type a description of your repository. For example, \"My personal repository.\"</li> <li>Select Public.</li> <li>Select Initialize this repository with a README.</li> <li>Click Create repository.</li> <li>Above the right sidebar, click Edit README.</li> </ul> Add your repo stats to your README <p>You can add this line of markdown in your README file, to add stats about your work in Github. <pre><code>[![Anurag's GitHub stats](https://github-readme-stats.vercel.app/api?username=charlstown&amp;show_icons=true&amp;theme=nightowl)](https://github.com/anuraghazra/github-readme-stats)\n</code></pre></p> <p>You can copy this structure to create your README easily. <pre><code>## Hello \ud83d\udc4b\n\nWelcome to my Github account! I'm YOUR NAME a ... enthusiast.\nIn this account, you'll find projects, and resources about ...\nI hope you enjoy my content and find it useful.\n\n&lt;/br&gt;\n\n### About me\n\n- :computer: I\u2019m currently studying ...\n- :microscope: I\u2019m currently learning `AI applied`.\n- :v: I\u2019m looking to colaborate on coding for ...\n\n\n### My favorite repos\n\n- :desktop_computer: **[My repo](#):**.\n- :desktop_computer: **[My repo](#):**.\n- :desktop_computer: **[My repo](#):**.\n\n\n### Thank you!\n\nIf you have any questions, or comments, please get in touch.\n\nHappy coding! :vulcan_salute:\n\n-- @username\n</code></pre></p> <p>Congratulations! You've successfully created your profile README. </p>"},{"location":"program/unit-1/11-introduction-to-git-and-github/#32-apply-to-the-program-as-new-student","title":"3.2 Apply to the program as new student","text":"<p>To request the application for this program you need to know how to fork (copy) the official course repository, modify the files by adding your name and email, and making a pull request to the original repository to add your student data.</p>"},{"location":"program/unit-1/11-introduction-to-git-and-github/#fork-the-course-repository","title":"Fork the course repository","text":"<ul> <li>Go to the ai-applied-repository, that contains the files of this course.</li> <li>Fork the repository by pressing the fork button on the top right corner.     </li> <li>Add you user as owner of the new copy of the repository, and make sure you only copy the main branch.     </li> </ul>"},{"location":"program/unit-1/11-introduction-to-git-and-github/#clone-the-repository-in-your-local-computer","title":"Clone the repository in your local computer","text":"<ul> <li>Open your prefered console, git bash or anaconda and go to the directory where you want to clone the project.     <pre><code>cd \"E:\\My PC\\00_WIP\"\n</code></pre></li> <li>Make sure you are in the correct directory by running the <code>pwd</code> command and check if the folder is empty <code>ls</code>.     <pre><code>pwd\nls\n</code></pre></li> <li>Copy the link of the repository by clicking the code button and the  <code>copy</code> icon     </li> <li>Now clone the repository locally by running the following.     <pre><code>git clone THE-COPIED-REPOSITORY-LINK\n</code></pre></li> </ul>"},{"location":"program/unit-1/11-introduction-to-git-and-github/#add-yourself-to-the-students-list","title":"Add yourself to the students list","text":"<p>To add your yourself to the student list you need to locate the file <code>ai-applied-education/docs/program/students.md</code>, and add your name to the markdown table.</p> <ul> <li>Open Anacoda Promt console, and Navigate to the file <code>students.md</code>, you can do this by running the following command.     <pre><code>cd &lt;route-to-your-repository&gt;\n</code></pre></li> <li>Start Jupyter Lab in this path.     <pre><code>jupyter lab\n</code></pre></li> <li>Navigate on the left File Browser to the path <code>ai-applied-education/docs/program</code> and open the file <code>students.md</code>.</li> <li>Add your name to the markdown table under the example. (Make sure you copy the same structure)     <pre><code>| Name | Email | Github |\n| --- | --- | --- |\n| name | email | github-link |\n| Mar\u00eda Jimeno | mjimeno@email.com | https://github.com/mjimeno |\n</code></pre></li> <li>Save and close the file.</li> </ul>"},{"location":"program/unit-1/11-introduction-to-git-and-github/#commit-push-to-remote-repository","title":"Commit &amp; Push to remote repository","text":"<ul> <li> <p>Open the git bash console again and navigate to the root path of the repository.     <pre><code>cd \"E:\\My PC\\00_WIP\\AiAppliedEducation\"\n</code></pre></p> </li> <li> <p>Add the changes by <code>git add</code> command.     <pre><code>git add .\n</code></pre></p> </li> <li>Commit the changes to local git by <code>git commit</code> command. Make sure you add your name to the command.     <pre><code>git commit -m \"update: Mar\u00eda student added\"\n</code></pre></li> <li>Push changes to remote repository.     <pre><code>git push\n</code></pre></li> <li>Make sure you pushed your files successfully by visiting your forked github repository in the browser</li> </ul>"},{"location":"program/unit-1/11-introduction-to-git-and-github/#pull-request-to-the-official-repository","title":"Pull request to the official repository","text":"<ul> <li>Go to commits ahead message and click the link.     </li> <li>Click the <code>Create pull request</code> button to make the pull request to the original repository.     </li> <li>Add a descriptive comment explaining your provided feature somthing like     <pre><code>Application of the student \"Mar\u00eda Jimeno\" to the `students.md` file.\n</code></pre></li> <li>Send the pull request by clicking the <code>Merge pull request</code> button.     </li> </ul> <p>Congratulations you have applied to the program. You will see your name and email at the Students site when the owner of the repository to accept your pull request.</p>"},{"location":"program/unit-1/12-introduction-to-python/","title":"Introduction to Python","text":""},{"location":"program/unit-1/12-introduction-to-python/#1-basic-python","title":"1. Basic Python","text":"<pre><code>graph TD\n    PY[Python variables] --&gt; PR[1.1 Primitive variables]\n    PY[Python variables] --&gt; DS[1.2 Data structures]\n    PR --&gt; INT{integer}\n    PR --&gt; FLT{float}\n    PR --&gt; STR{string}\n    PR --&gt; BOL{boolean}\n    DS --&gt; LST{list}\n    DS --&gt; DCT{dictionary}\n    DS --&gt; TPL{tuple}\n    DS --&gt; SET{set}</code></pre>"},{"location":"program/unit-1/12-introduction-to-python/#11-variable-types","title":"1.1 Variable types","text":"<p>Variable types in Python represent simple, fundamental data types directly supported by the programming language, providing the building blocks for more complex data structures and operations.</p> Variable Declaration Example Integer int <code>128</code>; <code>1</code> Float float <code>1.5</code>; <code>14.</code> String str <code>\"This is a string.\"</code>; <code>\"126\"</code>; <code>\",.$\"</code> Boolean bool <code>True</code>; <code>False</code>"},{"location":"program/unit-1/12-introduction-to-python/#integer","title":"Integer","text":"<p>Example of Integer Variables:</p> <ul> <li>a = 1</li> <li>b = -200</li> <li>c = 30000</li> </ul> <p><pre><code>a = 1\nb = -200\nc = 399999\n\nprint(a)\nprint(b)\nprint(c)\n</code></pre>      1     -200     399999 </p>"},{"location":"program/unit-1/12-introduction-to-python/#float","title":"Float","text":"<p>Example of Float Variables:</p> <ul> <li>a = 1.</li> <li>b = -3.5</li> <li>c = 548.36</li> </ul> <p><pre><code>a = 1.\nb = -3.5\nc = 548.36\n\nprint(a)\nprint(b)\nprint(c)\n</code></pre>      1.0     -3.5     548.36  </p>"},{"location":"program/unit-1/12-introduction-to-python/#string","title":"String","text":"<p>Example of String Variables:</p> <ul> <li>a = \"The Witcher.\"</li> <li>b = \"12/09/2023\"</li> <li>c = \"56.1\"</li> </ul> <pre><code>a = \"The Witcher.\"\nb = \"12/09/2023\"\nc = \"56.1\"\nd = \"\"\n\nprint(a)\nprint(b)\nprint(c)\nprint(d)\n</code></pre> <p>The Witcher. 12/09/2023 56.1  </p>"},{"location":"program/unit-1/12-introduction-to-python/#boolean","title":"Boolean","text":"<p>Example of Boolean Variables:</p> <ul> <li>a = True</li> <li>b = False</li> </ul> <pre><code>a = True\nb = False\n\nprint(a)\nprint(b)\n</code></pre> <p>True False   </p>"},{"location":"program/unit-1/12-introduction-to-python/#12-data-structures","title":"1.2 Data structures","text":"<p>Python data structures are essentially containers for different kinds of data.</p> Variable Declaration Example List list <code>[1, \"Hi\", \"23\", True]</code> Dictionary dict <code>{\"element_a\": 3, \"other\": False}</code> Tuple tuple <code>(1, \"hi\", True)</code> Set set <code>{\"a\", 4, True, 9}</code> Example of a combined data structure in real life <pre><code>song = {\n        \"title\": \"Bohemian Rhapsody\",\n        \"artist\": \"Queen\",\n        \"album\": {\n            \"name\": \"A Night at the Opera\",\n            \"release_year\": 1975,\n            \"tracks\": 12\n        },\n        \"duration\": \"6:07\",\n        \"genre\": [\"Rock\", \"Progressive Rock\"],\n        \"ratings\": {\n            \"five_stars\": 3000,\n            \"four_stars\": 2000,\n            \"three_stars\": 500,\n            \"two_stars\": 100,\n            \"one_star\": 50\n        },\n        \"is_explicit\": False,\n        \"featured_artists\": [\"Freddie Mercury\", \"Brian May\", \"Roger Taylor\", \"John Deacon\"]\n}\n</code></pre>"},{"location":"program/unit-1/12-introduction-to-python/#list","title":"List","text":"<p>A list in Python is a collection of ordered elements that can contain different data types and be modified,  allowing you to store and manage multiple values in a single variable.</p> More about lists <p>Lists are mutable, allowing you to modify, add, or remove elements after their creation. Lists are ordered, meaning the elements are stored in a specific sequence, and you can access elements using their index.</p> <p>Example of List Variables:</p> <ul> <li>a = [1, 5.2, 3.]</li> <li>b = [\"Sara\", \"Jorge\", \"\"]</li> <li>c = [\"Paseo de la Castellana\", 136, True, \"5\u00ba D\"]</li> <li>z = []</li> </ul> <pre><code>a = [1, 5.2, 3.]\nb = [\"Sara\", \"Jorge\", \"\"]\nc = [\"Paseo de la Castellana\", 136, True, \"5\u00ba D\"]\nz = list()\n\nprint(a)\nprint(b)\nprint(c)\nprint(z)\n</code></pre> <p>[1, 5.2, 3.0] ['Sara', 'Jorge', ''] ['Paseo de la Castellana', 136, True, '5\u00ba D'] [] </p>"},{"location":"program/unit-1/12-introduction-to-python/#dictionary","title":"Dictionary","text":"<p>A dictionary in Python is a collection of key-value pairs that allows you to store and retrieve data using unique keys,  providing a way to organize and access data based on custom labels or identifiers.</p> More about dictionaries <p>Dictionaries are mutable, meaning you can modify, add, or remove key-value pairs after their creation. However, dictionaries are unordered, so the order of items may not be preserved when iterating over the dictionary.</p> <p>Example of Dictionary Variables:</p> <ul> <li>a = {\"a\": 1, \"b\": 3.2, \"c\": }</li> <li>b = {5648: \"@rachel\", \"test\": True, \"user\": [2, 5, 63]}</li> <li>c = {\"title\": \"The Matrix\", \"year\": 1999, \"genre\": [\"Action\", \"Sci-Fi], \"rating\": 8.7}</li> <li>z = {}</li> </ul> <pre><code>a = {\"a\": 1, \"b\": 3.2, \"c\": False}\nb = {5648: \"@rachel\", \"test\": True, \"user\": [2, 5, 63]}\nc = {\"title\": \"The Matrix\", \"year\": 1999, \"genre\": [\"Action\", \"Sci-Fi\"], \"rating\": 8.7}\nz = dict()\n\nprint(a)\nprint(b)\nprint(c)\nprint(z)\n</code></pre> <p>{'a': 1, 'b': 3.2, 'c': False} {5648: '@rachel', 'test': True, 'user': [2, 5, 63]} {'title': 'The Matrix', 'year': 1999, 'genre': ['Action', 'Sci-Fi'], 'rating': 8.7} {}</p>"},{"location":"program/unit-1/12-introduction-to-python/#tuple","title":"Tuple","text":"<p>A tuple in Python is an immutable ordered collection of elements that can contain different data types, separated by commas and enclosed in parentheses, providing a way to group related data together.</p> Tuples Vs. Lists <p>Tuples are immutable, meaning their elements cannot be changed or modified after creation, making them suitable for situations where data should not be altered. Tuples are faster than lists, allowing for optimized memory allocation and faster access.</p> <p>Example of Tuple Variables:</p> <ul> <li>a = (1, 2, 3)</li> <li>b = (\"apple\", 10, True)</li> <li>c = (3.14, \"pie\", [1, 2, 3], {\"name\": \"John\", \"age\": 30})</li> </ul> <pre><code>a = (1, 2, 3)\nb = (\"apple\", 10, True)\nc = (3.14, \"pie\", [1, 2, 3], {\"name\": \"John\", \"age\": 30})\nz = tuple()\n\nprint(a)\nprint(b)\nprint(c)\nprint(z)\n</code></pre> <p>(1, 2, 3) ('apple', 10, True) (3.14, 'pie', [1, 2, 3], {'name': 'John', 'age': 30}) ()</p>"},{"location":"program/unit-1/12-introduction-to-python/#set","title":"Set","text":"<p>A set in Python is a collection of unique and unordered elements that allows you to perform various set operations, such as union, intersection, and difference.</p> More about sets <p>Sets are defined using curly braces <code>{}</code> or the built-in <code>set()</code> function. Duplicate elements are automatically removed, and the order of elements is not guaranteed in a set.</p> <p>Example of Set Variables:</p> <ul> <li>a = {1, 2, 3}</li> <li>b = {4, 5, 6}</li> <li>c = {True, \"hello\", 3.14, (1, 2)}</li> <li>z = set()</li> </ul> <pre><code>a = {1, 2, 3}\nb = {4, 5, 6}\nc = {True, \"hello\", 3.14, (1, 2)}\nz = set()\n\nprint(a)\nprint(b)\nprint(c)\nprint(z)\n</code></pre> <p>{1, 2, 3} {4, 5, 6} {3.14, True, (1, 2), 'hello'} set()</p>"},{"location":"program/unit-1/12-introduction-to-python/#13-comments","title":"1.3 Comments","text":"<p>Comments in Python are lines of text that are ignored by the interpreter and are used to provide explanations, clarifications, or notes within the code.</p> Tip about comments <p>In Python, it is possible to write comments using the Spanish language, including special characters. However, it is generally recommended to avoid using accents in comments to ensure compatibility and readability across different platforms and text editors. </p> <pre><code># This is a comment\n\n# Picture attributes\npic = {\"picture_name\": \"My doggy\", \"date\": \"12/02/2023\", \"likes\": 1658}\n</code></pre>"},{"location":"program/unit-1/12-introduction-to-python/#14-declare-variables","title":"1.4 Declare variables","text":""},{"location":"program/unit-1/12-introduction-to-python/#naming-convention","title":"Naming convention","text":"<p>The Python naming convention for variables and files is camel case, where punctuation is removed, spaces are replaced by single underscores, and the letters are in lower case.</p> <pre><code># variable\nthis_is_a_variable = \"camel case\"\n\n# examples\nuser_name = \"Paula\"\nvideo_game = \"What Remains of Edith Finch\"\nhas_views = True\n</code></pre>"},{"location":"program/unit-1/12-introduction-to-python/#assignment-methods","title":"Assignment methods","text":"<p>Is the process of assigning or storing data to a variable, enabling the programmer to give a meaningful name to the data and easily access and manipulate it throughout the program.</p> <p></p> <ul> <li>Direct assignment: content.     <pre><code>song = \"Give it all\"\nduration = 3.16\n</code></pre></li> <li>Multiple assignment: <pre><code>song, duration = \"Give it all\", 3.16\n</code></pre></li> <li> <p>Multiple variables assignment: <pre><code>user = name = \"Jorge\"\n</code></pre></p> </li> <li> <p>User input assignment: <pre><code>name = input(\"Enter your name: \")\nage = input(\"Enter your age: \")\n</code></pre></p> </li> </ul>"},{"location":"program/unit-1/12-introduction-to-python/#15-print","title":"1.5 Print","text":"<p>To display output messages or values to the user on the console or terminal.</p> Tip about print <p>Remember that <code>print()</code> is an essential tool for beginners and experienced developers alike, making it easier to interact with your programs and see what's happening at each step.</p>"},{"location":"program/unit-1/12-introduction-to-python/#basic-print","title":"Basic print","text":"<pre><code>print(Hello, World!)\n</code></pre> <p>Hello, World!</p>"},{"location":"program/unit-1/12-introduction-to-python/#variable-print","title":"Variable print","text":"<pre><code># Declaring variables\nmovie = \"Barbie\"\nrating = 9.\n\n# Printing variables\nprint(movie)\nprint(rating)\n</code></pre> <p>Barbie 9.0</p>"},{"location":"program/unit-1/12-introduction-to-python/#in-line-print","title":"In-line print","text":"<pre><code># Declaring variables\nmovie = \"Barbie\"\nrating = 9.\n\n# Printing variables\nprint(movie, rating)\n</code></pre> <p>Barbie 9.0</p>"},{"location":"program/unit-1/12-introduction-to-python/#concat-print","title":"Concat print","text":"<pre><code># Declaring variables\nmovie = \"Barbie\"\nrating = 9.\n\n# Printing variables\nprint(\"The movie \" + movie + \" has a rating of: \" + str(rating))\n</code></pre> <p>The movie Barbie has a rating of: 9.0</p>"},{"location":"program/unit-1/12-introduction-to-python/#formatted-string-literals-f-string","title":"Formatted string literals (f-string)","text":"<pre><code># Declaring variables\nmovie = \"Barbie\"\nrating = 9.\n\n# Printing variables\nprint(f\"The movie {movie} has a rating of {rating}\")\n</code></pre> <p>The movie Barbie has a rating of: 9.0</p>"},{"location":"program/unit-1/12-introduction-to-python/#16-type","title":"1.6 Type","text":"<p>Is used to determine the data type of a value or variable, such as whether it is an integer, string, boolean, etc. <pre><code># Declaring variables\nsong = \"Yeah Yeah Yeah\"\nduration = 3.25\nis_suitable = True\n\n# Get the types\nsong_type = type(song)\nduration_type = type(duration)\nis_suitable_type = type(is_suitable)\n\n# Ouput\noutput = f\"\"\"Song: {song} - [{song_type}]\nDuration: {duration} - [{duration_type}]\nSuitable: {is_suitable} - [{is_suitable_type}]\n\"\"\"\n\nprint(output)\n</code></pre>      Song: Yeah Yeah Yeah - [&lt;class 'str'&gt;]     Duration: 3.25 - [&lt;class 'float'&gt;]     Suitable: True - [&lt;class 'bool'&gt;] </p>"},{"location":"program/unit-1/12-introduction-to-python/#17-interact-with-files-in-python","title":"1.7 Interact with files in Python","text":""},{"location":"program/unit-1/12-introduction-to-python/#read-a-text-file","title":"Read a text file","text":"<p><pre><code>text_file = open('/Users/pankaj/filename.txt','r', encoding='utf-8')\n# some file operations here\ntext_file.read()\n\ntext_file.close()\n</code></pre> When you open a file in Python, it\u2019s extremely important to close the file after you make the changes. This saves any changes that you\u2019ve previously made, removes the file from the memory, and prevents any further reads or writes within the program.</p>"},{"location":"program/unit-1/12-introduction-to-python/#read-a-csv-file","title":"Read a CSV file","text":"<pre><code>import csv\nwith open('chocolate.csv') as f:\n    reader = csv.reader(f, delimiter=',')\n    for row in reader:\n        print(row)\n</code></pre>"},{"location":"program/unit-1/12-introduction-to-python/#2-operators","title":"2 Operators","text":""},{"location":"program/unit-1/12-introduction-to-python/#21-numeric-operators","title":"2.1 Numeric operators","text":"Operator Statement Math operations <code>1+3</code> , <code>5-2</code> , <code>10/5</code>, <code>2*4</code> Exponent <code>2**3</code> String -&gt; integer/float <code>int(\"24\")</code> Reminder <code>10%3</code> Max, min &amp; sum <code>max(lst)</code>, <code>min(lst)</code>, <code>sum(lst)</code> Absolute <code>abs(-3)</code> Round <code>round(3.2153, 1)</code> Floor Division <code>12//6</code>"},{"location":"program/unit-1/12-introduction-to-python/#basic-math-operations","title":"Basic math operations","text":"<pre><code>money = 1258\nemployees = 3\niva = 1.21\n\n# Add employee\nemployees += 1  # Is like employees = employees + 1\n\n# Get reminder\nprint(money/employees)\nprint(money*iva)\n</code></pre> <p>314.5 1522.18</p>"},{"location":"program/unit-1/12-introduction-to-python/#exponent-operations","title":"Exponent operations","text":"<pre><code>three_power_three = 3**3\nthree_sqrt_three = 3**.5\n\n# Exponent operation\nprint(three_power_three)\nprint(round(three_sqrt_three, 2))\n</code></pre> <p>27 1.73</p>"},{"location":"program/unit-1/12-introduction-to-python/#string-to-integerfloat","title":"String to integer/float","text":"<pre><code>age_str = \"25\"\n\n# Get integer\nage_int = int(age_str)\nage_float = float(age_str)\n\n# Print types\nprint(type(age_str))\nprint(type(age_int))\nprint(type(age_float))\n</code></pre> <p>&lt;class 'str'&gt; &lt;class 'int'&gt; &lt;class 'float'&gt;  </p>"},{"location":"program/unit-1/12-introduction-to-python/#reminder","title":"Reminder","text":"<pre><code>money = 1258\nemployees = 4\n\n# Get reminder\nprint(money%employees)\n</code></pre> <p>2</p>"},{"location":"program/unit-1/12-introduction-to-python/#max-min-sum-value","title":"Max, min &amp; sum value","text":"<pre><code>scores = [2.2, 3., 5.7, 9.1, 6., 3.2, -3.1, 9.4, -1.5, -3.6]\n\n# Get max and min\nprint(max(scores))\nprint(min(scores))\nprint(sum(scores))\n</code></pre> <p>9.4 -3.6 30.4</p>"},{"location":"program/unit-1/12-introduction-to-python/#absolute-value","title":"Absolute value","text":"<pre><code>number = -3.5\n\n# Get max and min\nprint(abs(number))\n</code></pre> <p>3.5</p>"},{"location":"program/unit-1/12-introduction-to-python/#round-value","title":"Round value","text":"<pre><code>number = 1.32586\n\n# Round to 2 decimals\nnumber_round = round(number, 2)\nprint(number_round)\n</code></pre> <p>1.32</p>"},{"location":"program/unit-1/12-introduction-to-python/#floor-division","title":"Floor Division","text":"<pre><code>one, two = 10//7, 12/8\n\n# Output results\nprint(f\"10/7 -&gt; {one} ({10/7})\")\nprint(f\"12/8 -&gt; {two} ({12/8})\")\n</code></pre> <p>10/7 -&gt; 1 (1.4285714285714286) 12/8 -&gt; 1.5 (1.5)</p>"},{"location":"program/unit-1/12-introduction-to-python/#22-string-operators","title":"2.2 String operators","text":"Operator Statement Integer/float to string <code>str(31.2)</code> Length of a string <code>len(\"Number of characters\")</code> Concatenate strings <code>\"This\" + \" is\" + \" concatenation.\"</code> Escape characters <code>\"\\\"Hello,\\\" she said.\"</code> Upper, Lower, Title cases <code>\"My NaMe iS aLiCIa\".lower()</code> String to list <code>\"Welcome to the dark side\".split()</code> Split string by <code>\"This;is;a;string\".split(\";\")</code> List to string <code>\" \".join([\"Hello\", \"World\"])</code> New line and tabulator <code>\"First line\\n Second line\"</code> Check substring <code>\"a\" in \"This is a test\"</code> Check only letters <code>\"abcdefghijklmn\".isalpha()</code> Multiply strings <code>\"Three\"*3</code> Replace string <code>\"Thiz iz a ztring\".replace(\"z\", \"s\")</code> Strip text <code>\"   Hi   \".strip()</code> Find index <code>\"This is a string\".find(\"s\")</code>"},{"location":"program/unit-1/12-introduction-to-python/#integerfloat-to-string","title":"Integer/float to string","text":"<pre><code>time_int = 31\ntime_float = 31.25\n\n# Get integer\ntime_int_str = str(time_int)\ntime_float_str = str(time_float)\n\n# Print types\nprint(time_int_str, type(time_int_str))\nprint(time_float_str, type(time_float_str))\n</code></pre> <p>31 &lt;class 'str'&gt; 31.25 &lt;class 'str'&gt;  </p>"},{"location":"program/unit-1/12-introduction-to-python/#length-of-a-string","title":"Length of a string","text":"<pre><code>song = \"Back in Black\"\npassword = \"4r236TY5S5F65H6xjt\"\n\n# Get lenghts\nprint(len(song))\nprint(len(password))\n</code></pre> <p>13 18</p>"},{"location":"program/unit-1/12-introduction-to-python/#concatenate-strings","title":"Concatenate strings","text":"<pre><code>song = \"doomsday\"\nartist = \"sad face.\"\n\n# Concatenate string\nmessage = \"The song \" + song + \" is made by \" + artist\nprint(message)\n</code></pre> <p>The song doomsday is made by sad face.</p>"},{"location":"program/unit-1/12-introduction-to-python/#escape-characters","title":"Escape characters","text":"<pre><code># Escape symbols\nmessage = \"Somtimes he goes by \\\"chuck\\\"\"\nprint(message)\n</code></pre> <p>Somtimes he goes by \"chuck\"</p>"},{"location":"program/unit-1/12-introduction-to-python/#upper-lower-title-cases","title":"Upper, Lower, Title cases","text":"<pre><code>message = \"Hello, world\"\n\n# Upper, Lower, Title cases\nmessage_low = message.lower()\nmessage_up = message.upper()\nmessage_title = message.title()\n\n# Print messages\nprint(f\"Low -&gt; {message_low}\")\nprint(f\"Up -&gt; {message_up}\")\nprint(f\"Title -&gt; {message_title}\")\n</code></pre> <p>Low -&gt; hello, world Up -&gt; HELLO, WORLD Title -&gt; Hello, World</p>"},{"location":"program/unit-1/12-introduction-to-python/#string-to-list","title":"String to list","text":"<pre><code>message = \"This is a String\"\nprint(message.split())\n</code></pre> <p>['This', 'is', 'a', 'String']</p>"},{"location":"program/unit-1/12-introduction-to-python/#split-string-by","title":"Split string by","text":"<pre><code>message = \"This-is-a-long-string\"\nprint(message.split('-'))\n</code></pre> <p>['This', 'is', 'a', 'long', 'string']</p>"},{"location":"program/unit-1/12-introduction-to-python/#list-to-string","title":"List to string","text":"<pre><code>message = ['This', 'is', 'a', 'long', 'string']\nprint(\" \".join(message))\n</code></pre> <p>This is a long string</p>"},{"location":"program/unit-1/12-introduction-to-python/#new-line-and-tabulator","title":"New line and tabulator","text":"<pre><code>new_line = \"First line\\nNew line\"\ntabulator = \"\\tTabulator line\"\n\n# Print\nprint(new_line)\nprint(tabulator)\n</code></pre> <p>First line New line \u2002Tabulator line</p>"},{"location":"program/unit-1/12-introduction-to-python/#check-substring","title":"Check substring","text":"<pre><code>code = \"The code is: 5223565-K\"\n\n# Check K is in code\ncheck = \"K\" in code\nprint(check)\n</code></pre> <p>True</p>"},{"location":"program/unit-1/12-introduction-to-python/#check-only-letters","title":"Check only letters","text":"<pre><code>is_alpha = \"AlphaCode\"\n\n# Check alphanumeric\ncheck = is_alpha.isalpha()\nprint(check)\n</code></pre> <p>True</p>"},{"location":"program/unit-1/12-introduction-to-python/#multiply-strings","title":"Multiply strings","text":"<pre><code>pattern = \"-\"\n\n# Print\nmulti = pattern * 5\nprint(multi)\n</code></pre> <p>-----</p>"},{"location":"program/unit-1/12-introduction-to-python/#replace-string","title":"Replace string","text":"<pre><code>message = \"Thiz iz a ztring\"\n\n# Replace string\nmessage = message.replace(\"z\", \"s\")\nprint(message)\n</code></pre> <p>This is a string</p>"},{"location":"program/unit-1/12-introduction-to-python/#strip-text","title":"Strip text","text":"<pre><code>message = \"    Strip message    \"\n\n# Strip message\nmessage_strip = message.strip()\n\n# Comparison\nprint(f\"{message} ({len(message)})\")\nprint(f\"{message_strip} ({len(message_strip)})\")\n</code></pre> <p>\u00a0\u00a0\u00a0\u00a0Strip message\u00a0\u00a0\u00a0\u00a0(21) Strip message (13)</p>"},{"location":"program/unit-1/12-introduction-to-python/#find-index","title":"Find index","text":"<pre><code>message = \"This is a string\"\nletter = \"s\"\n\n# Find first letter index\nidx = message.find(letter)\nprint(f\"{message} (First \\\"{letter}\\\" is in position: {idx})\")\n</code></pre> <p>This is a string (First \"s\" is in position: 3)</p>"},{"location":"program/unit-1/12-introduction-to-python/#23-list-operators","title":"2.3 List operators","text":"Operator Statement Element at index <code>lst[2]</code> Get last element <code>lst[-1]</code> Modify item <code>lst[1] = 'x'</code> Add item at the end <code>lst.append('a')</code> Slicing a list <code>lst[1:3]</code> Order a list <code>sorted(lst)</code> List length <code>len(lst)</code> List from range <code>list(range(1, 5))</code> Reverse a list <code>lst.reverse()</code> Remove item <code>lst.remove(5)</code> Count item <code>lst.count('#')</code> Entwine lists <code>zip(lst_a, lst_b)</code> Enumerate list <code>enumerate(lst)</code>"},{"location":"program/unit-1/12-introduction-to-python/#element-at-index","title":"Element at index","text":"<p>Indexing in python</p> <p>Remember that indexing in Python starts from 0, so the first element is at index 0, the second at index 1, and so on.</p> <pre><code># List of planets\nplanets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n# Extracting value at index 2 (which is the third element in the list)\nvalue = planets[2]\n\nprint(value)\n</code></pre> <p>Earth</p>"},{"location":"program/unit-1/12-introduction-to-python/#get-last-element","title":"Get last element","text":"<p>To get the last element from a list in Python, you can use negative indexing. Negative indices count elements from the end of the list, where -1 represents the last element, -2 represents the second-to-last element, and so on.</p> <pre><code>planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n# Getting the last element using the negative index\nlast_planet = planets[-1]\npenultimate_planet = planets[-2]\n\nprint(last_planet)\nprint(penultimate_planet)\n</code></pre> <p>Neptune Uranus</p>"},{"location":"program/unit-1/12-introduction-to-python/#modify-item","title":"Modify item","text":"<p>Suppose we want to modify the name of a planet, let's say \"Mars\" to \"Red Planet.\" We can do this by using the index to access the element and then assigning the new name to it.</p> <pre><code># Original list of planets\nplanets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n# Modifying the name of a planet\nindex_of_mars = 3  # Index of \"Mars\" is 3\nnew_name = \"Red Planet\"\nplanets[index_of_mars] = new_name\n\n# Updated list of planets\nprint(planets)\n</code></pre> <p>[\"Mercury\", \"Venus\", \"Earth\", \"Red Planet\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]</p>"},{"location":"program/unit-1/12-introduction-to-python/#add-item-at-the-end","title":"Add item at the end","text":"<p>If we want to add the planet \"Pluto\" at the end of the list, we can use the append() method.</p> <pre><code># Original list of planets\nplanets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n# Adding \"Pluto\" at the end of the list using append()\nplanets.append(\"Pluto\")\n\n# Updated list of planets\nprint(planets)\n</code></pre> <p>[\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\", \"Pluto\"]</p>"},{"location":"program/unit-1/12-introduction-to-python/#slicing-a-list","title":"Slicing a list","text":"<p>Imagine we want to create a new list containing the planets before \"Earth,\" including \"Earth,\" by using slicing.</p> More about slicing lists <p>When using slicing in Python lists, the slice includes all elements up to, but not including, the index specified as the end of the slice.</p> <pre><code># Original list of planets\nplanets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n# Slicing to include planets before and including \"Earth\"\nsliced_planets = planets[:2 + 1]\n\n# Sliced list of planets\nprint(sliced_planets)\n</code></pre> <p>[\"Mercury\", \"Venus\", \"Earth\"]</p> Advanced code <p>If we don't want to insert the index of the planet Earth manually we can use the index method. <pre><code>sliced_planets = planets[:planets.index(\"Earth\") + 1]\n</code></pre></p>"},{"location":"program/unit-1/12-introduction-to-python/#order-a-list","title":"Order a list","text":"<p>In this example, the <code>sorted()</code> function is used to sort the list of planets alphabetically, and the sorted result is stored in the sorted_planets variable.</p> <pre><code># List of planets\nplanets = [\"Mercury\", \"Venus\", \"Mars\", \"Earth\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n# Sort the planets alphabetically\nsorted_planets = sorted(planets)\n\n# Print the sorted list of planets\nprint(sorted_planets)\n</code></pre> <p>['Earth', 'Jupiter', 'Mars', 'Mercury', 'Neptune', 'Saturn', 'Uranus', 'Venus']</p>"},{"location":"program/unit-1/12-introduction-to-python/#list-length","title":"List length","text":"<p>In this example, the <code>len()</code> function is used to count the number of items in a list.</p> <pre><code># List of planets\nplanets = [\"Mercury\", \"Venus\", \"Mars\", \"Earth\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n# Sort the planets alphabetically\nn_planets = len(planets)\n\n# Print the sorted list of planets\nprint(f\"There are {n_planets} planets in the solar system.\")\n</code></pre> <p>There are 9 planets in the solar system.</p>"},{"location":"program/unit-1/12-introduction-to-python/#list-from-range","title":"List from range","text":"<pre><code># Using range(2, 3) to create a list with a single element\nlist1 = list(range(2, 4))\n\n# Using range(6) to create a list with numbers from 0 to 5\nlist2 = list(range(6))\n\n# Print the lists\nprint(list1)\nprint(list2)\n</code></pre> <p>[2, 3] [0, 1, 2, 3, 4, 5]</p>"},{"location":"program/unit-1/12-introduction-to-python/#reverse-a-list","title":"Reverse a list","text":"<p>There are two methods to reverse a list, using the <code>lst.reverse()</code> function and slicing <code>lst[::-1]</code>.</p> <p><code>Reverse()</code> Vs. <code>[::-1]</code></p> <p>The reverse() method modifies the original list in place, while slicing [::-1] creates a new reversed list without modifying the original one.</p> <pre><code># List of planets in the solar system\nplanets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n# Method 1: Using reverse()\nreversed_planets_1 = planets.copy()\nreversed_planets_1.reverse()\n\n# Method 2: Using slicing [::-1]\nreversed_planets_2 = planets[::-1]\n\n# Print the reversed lists\nprint(\"Reversed using reverse():\", reversed_planets_1)\nprint(\"Reversed using slicing [::-1]:\", reversed_planets_2)\n</code></pre> <p>Reversed using reverse(): ['Neptune', 'Uranus', 'Saturn', 'Jupiter', 'Mars', 'Earth', 'Venus', 'Mercury'] Reversed using slicing [::-1]: ['Neptune', 'Uranus', 'Saturn', 'Jupiter', 'Mars', 'Earth', 'Venus', 'Mercury']</p>"},{"location":"program/unit-1/12-introduction-to-python/#remove-item","title":"Remove item","text":"<p>The <code>remove()</code> method is used to remove the specified element (\"Pluto\" in this case) from the list planets. After calling <code>remove(\"Pluto\")</code>, \"Pluto\" is no longer present in the list.</p> <pre><code># List of planets in the solar system\nplanets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\", \"Pluto\"]\n\n# Remove \"Pluto\" from the list\nplanets.remove(\"Pluto\")\n\n# Print the updated list of planets\nprint(planets)\n</code></pre> <p>['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']</p>"},{"location":"program/unit-1/12-introduction-to-python/#count-item","title":"Count item","text":"<p>In this example, the <code>count()</code> function is used to count the occurrences of the element \"Earth\" in the planets list. The count is then stored in the variable earth_count and printed to the console. As you can see, \"Earth\" appears twice in the list, so the count is 2.</p> <pre><code># List of planets in the solar system\nplanets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\", \"Pluto\", \"Earth\"]\n\n# Count the number of occurrences of \"Earth\" in the list\nearth_count = planets.count(\"Earth\")\n\n# Print the count\nprint(\"The number of times 'Earth' appears in the list:\", earth_count)\n</code></pre> <p>The number of times 'Earth' appears in the list: 2</p>"},{"location":"program/unit-1/12-introduction-to-python/#entwine-lists","title":"Entwine lists","text":"<p>In this example, the <code>zip()</code> function is used to combine the planets list and the distances list into a new list called planet_distances. Each tuple in the planet_distances list contains a planet name and its corresponding distance from the Sun. The list() function is used to convert the zip object into a list for easy printing.</p> <pre><code># Lists of planets and their distances from the Sun (in millions of kilometers)\nplanets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"]\ndistances = [57.9, 108.2, 149.6, 227.9, 778.3]\n\n# Use zip to combine the two lists into a list of tuples\nplanet_distances = list(zip(planets, distances))\n\n# Print the combined list\nprint(planet_distances)\n</code></pre> <p>[('Mercury', 57.9), ('Venus', 108.2), ('Earth', 149.6), ('Mars', 227.9), ('Jupiter', 778.3)]</p>"},{"location":"program/unit-1/12-introduction-to-python/#enumerate-list","title":"Enumerate list","text":"<p>In this example, <code>enumerate(planets)</code> returns an iterator that produces tuples containing the index and planet from the planets list. </p> <pre><code># List of planets\nplanets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"]\n\n# Get an iterator for the planets list along with their indices using enumerate()\nenum_planets = enumerate(planets)\nprint(list(enum_planets))\n</code></pre> <p>[(0, 'Mercury'), (1, 'Venus'), (2, 'Earth'), (3, 'Mars'), (4, 'Jupiter')]</p>"},{"location":"program/unit-1/12-introduction-to-python/#24-dictionary-operators","title":"2.4 Dictionary operators","text":"Operator Statement Add key <code>dct['new_key'] = True</code> Add multiple keys <code>dct.update({'key1' = 1, 'key2' = False})</code> Overwrite value <code>dct['key'] = False</code> Extract value <code>dct['new_key']</code> Delete key and value <code>del dct['key_to_delete']</code> Keys &amp; values list <code>dct.keys()</code>, <code>dct.values()</code>, <code>dct.items()</code> Check key <code>\"key\" in market_value</code> Pair lists to dict <code>dict(zip(dct_1, dct_2))</code>"},{"location":"program/unit-1/12-introduction-to-python/#add-key","title":"Add key","text":"<pre><code># Dictionary representing market value of stock tech companies\nmarket_value = {\n    \"Apple\": 2345.67,\n    \"Microsoft\": 1765.89,\n    \"Amazon\": 3012.45,\n    \"Google\": 2789.34,\n    \"Facebook\": 1890.56\n}\n\n# Add key: Add a new company and its market value\nmarket_value[\"Tesla\"] = 1899.32\nprint(market_value)\n</code></pre> <p>{'Apple': 2345.67, 'Microsoft': 1765.89, 'Amazon': 3012.45, 'Google': 2789.34, 'Facebook': 1890.56, 'Tesla': 1899.32}</p>"},{"location":"program/unit-1/12-introduction-to-python/#add-multiple-keys","title":"Add multiple keys","text":"<pre><code># Dictionary representing market value of stock tech companies\nmarket_value = {\n    \"Apple\": 2345.67,\n    \"Microsoft\": 1765.89,\n    \"Amazon\": 3012.45,\n    \"Google\": 2789.34,\n    \"Facebook\": 1890.56\n}\n\n# Add multiple keys: Add multiple new companies and their market values\nmarket_value.update({\"Netflix\": 2156.78, \"Adobe\": 1654.32})\nprint(market_value)\n</code></pre> <p>{'Apple': 2345.67, 'Microsoft': 1765.89, 'Amazon': 3012.45, 'Google': 2789.34, 'Facebook': 1890.56, 'Netflix': 2156.78, 'Adobe': 1654.32}</p>"},{"location":"program/unit-1/12-introduction-to-python/#overwrite-value","title":"Overwrite value","text":"<pre><code># Dictionary representing market value of stock tech companies\nmarket_value = {\n    \"Apple\": 2345.67,\n    \"Microsoft\": 1765.89,\n    \"Amazon\": 3012.45,\n    \"Google\": 2789.34,\n    \"Facebook\": 1890.56\n}\nprint(f\"Before: {market_value}\")\n\n# Overwrite value: Update the market value of a company\nmarket_value[\"Apple\"] = 2367.98\nprint(f\"After: {market_value}\")\n</code></pre> <p>Before: {'Apple': 2345.67, 'Microsoft': 1765.89, 'Amazon': 3012.45, 'Google': 2789.34, 'Facebook': 1890.56} After: {'Apple': 2367.98, 'Microsoft': 1765.89, 'Amazon': 3012.45, 'Google': 2789.34, 'Facebook': 1890.56}</p>"},{"location":"program/unit-1/12-introduction-to-python/#extract-value","title":"Extract value","text":"<pre><code>market_value = {\n    \"Apple\": 2345.67,\n    \"Microsoft\": 1765.89,\n    \"Amazon\": 3012.45,\n    \"Google\": 2789.34,\n    \"Facebook\": 1890.56\n}\n\n# Extract value: Get the market value of a specific company\ngoogle_value = market_value[\"Google\"]\nprint(\"Market value of Google:\", google_value)\n</code></pre> <p>Market value of Google: 2789.34</p>"},{"location":"program/unit-1/12-introduction-to-python/#delete-key-and-value","title":"Delete key and value","text":"<pre><code>market_value = {\n    \"Apple\": 2345.67,\n    \"Microsoft\": 1765.89,\n    \"Amazon\": 3012.45,\n    \"Google\": 2789.34,\n    \"Facebook\": 1890.56\n}\n\n# Delete key and value: Remove a company and its market value from the dictionary\ndel market_value[\"Facebook\"]\n</code></pre> <p>{'Apple': 2345.67, 'Microsoft': 1765.89, 'Amazon': 3012.45, 'Google': 2789.34}</p>"},{"location":"program/unit-1/12-introduction-to-python/#extract-keys-values","title":"Extract keys &amp; values","text":"<pre><code># Dictionary representing market value of stock tech companies\nmarket_value = {\n    \"Apple\": 2345.67,\n    \"Microsoft\": 1765.89,\n    \"Amazon\": 3012.45,\n    \"Google\": 2789.34,\n    \"Tesla\": 1899.32,\n    \"Netflix\": 2156.78,\n    \"Adobe\": 1654.32\n}\n\n# Using .keys() to get a view of keys\nkeys_view = market_value.keys()\n\n# Using .values() to get a view of values\nvalues_view = market_value.values()\n\n# Using .items() to get a view of (key, value) pairs\nitems_view = market_value.items()\n\n# Print the views\nprint(\"Keys view:\", keys_view)\nprint(\"Values view:\", values_view)\nprint(\"Items view:\", items_view)\n</code></pre> <p>Keys view: dict_keys(['Apple', 'Microsoft', 'Amazon', 'Google', 'Tesla', 'Netflix', 'Adobe']) Values view: dict_values([2345.67, 1765.89, 3012.45, 2789.34, 1899.32, 2156.78, 1654.32]) Items view: dict_items([('Apple', 2345.67), ('Microsoft', 1765.89), ('Amazon', 3012.45), ('Google', 2789.34), ('Tesla', 1899.32), ('Netflix', 2156.78), ('Adobe', 1654.32)])</p>"},{"location":"program/unit-1/12-introduction-to-python/#check-key","title":"Check key","text":"<pre><code>market_value = {\n    \"Apple\": 2345.67,\n    \"Microsoft\": 1765.89,\n    \"Amazon\": 3012.45,\n    \"Google\": 2789.34,\n    \"Facebook\": 1890.56\n}\n\n# Check key: Check if a company is in the dictionary\nif \"Microsoft\" in market_value:\n    print(\"Microsoft is in the dictionary.\")\nelse:\n    print(\"Microsoft is not in the dictionary.\")\n</code></pre> <p>Microsoft is in the dictionary.</p>"},{"location":"program/unit-1/12-introduction-to-python/#pair-lists-to-dict","title":"Pair lists to dict","text":"<pre><code># Lists of tech companies and their market values\ntech_companies = [\"Apple\", \"Microsoft\", \"Amazon\", \"Google\", \"Tesla\"]\nmarket_values = [2345.67, 1765.89, 3012.45, 2789.34, 1899.32]\n\n# Create a dictionary by pairing tech_companies with market_values\nmarket_value_dict = dict(zip(tech_companies, market_values))\n\n# Print the resulting dictionary\nprint(market_value_dict)\n</code></pre> <p>{'Apple': 2345.67, 'Microsoft': 1765.89, 'Amazon': 3012.45, 'Google': 2789.34, 'Tesla': 1899.32}</p>"},{"location":"program/unit-1/12-introduction-to-python/#3-if-elif-else-statements","title":"3. If, elif, else statements","text":"<p>The if statement in Python is used to make decisions in code by checking whether a condition is true or false, and executing specific blocks of code based on the evaluation of the condition.</p> Indentation tip <p>Indentation in an if statement is crucial in Python because it defines the block of code that should be executed if the condition is true. </p> Operator Condition True always runs False never runs a &gt; b a greater than b a &gt;= b a greater or equal to b a &lt; b a smaller than b a &lt;= b a smaller or equal to b a == b a equal to b a != b a not equal to b a in b string in b not(a in b) string not in b <p>reminder</p> <p>You can add multiple conditions statement like: <pre><code>if a &gt; b and b != 0:\n</code></pre> or even more complex: <pre><code>if (check is True and temp = 30) or key == \"alohomora\":\n</code></pre></p>"},{"location":"program/unit-1/12-introduction-to-python/#31-if-else","title":"3.1 if else","text":"<pre><code>score = 75\n\nif score &gt;= 60:\n    print(\"Congratulations! You have passed the exam.\")\nelse:\n    print(\"Unfortunately, you did not pass the exam. Better luck next time.\")\n</code></pre> <p>Congratulations! You have passed the exam.</p>"},{"location":"program/unit-1/12-introduction-to-python/#32-if-elif-else","title":"3.2 if, elif, else","text":"<pre><code>number = 0\n\n# Check the number and provide a corresponding message\nif number &gt; 0:\n    print(\"The number is positive.\")\nelif number &lt; 0:\n    print(\"The number is negative.\")\nelse:\n    print(\"The number is zero.\")\n</code></pre> <p>The number is zero.</p>"},{"location":"program/unit-1/12-introduction-to-python/#33-nested-if-else","title":"3.3 Nested if, else","text":"<p>Let's consider a scenario where we have a user registration process, and we want to check the age of the user and whether they have provided all the required information.</p> <ol> <li>Check if the user's age is 18 or above using the outer if statement</li> <li>check if the user has provided both their name and email</li> </ol> <pre><code>age = 25\nhas_name = True\nhas_email = False\n\nif age &gt;= 18:\n    if has_name and has_email:\n        print(\"User registration successful!\")\n    else:\n        print(\"Please provide both your name and email to complete the registration.\")\nelse:\n    print(\"Sorry, you must be at least 18 years old to register.\")\n</code></pre> <p>Please provide both your name and email to complete the registration.</p>"},{"location":"program/unit-1/12-introduction-to-python/#4-loops","title":"4. Loops","text":""},{"location":"program/unit-1/12-introduction-to-python/#41-for-loop","title":"4.1 For loop","text":"<p>A for loop in Python is a way to repeat a set of instructions for each item in a collection (like a list or a string), allowing you to perform the same task on multiple elements one by one.</p>"},{"location":"program/unit-1/12-introduction-to-python/#iterating-a-list","title":"Iterating a list","text":"<pre><code># List of planet names\nplanet_names = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n\n# Iterating over the list and printing each planet name in capital letters\nprint(\"NASA's Planets:\")\nfor planet in planet_names:\n    planet_capital = planet.upper()\n    print(planet, planet_capital)\n</code></pre> <p>NASA's Planets: Mercury MERCURY Venus VENUS Earth EARTH Mars MARS Jupiter JUPITER Saturn SATURN Uranus URANUS Neptune NEPTUNE  </p>"},{"location":"program/unit-1/12-introduction-to-python/#iterating-a-string","title":"Iterating a string","text":"<pre><code># Tweet text\ntweet = \"Having a great time at the beach with friends. #summerfun #beachlife\"\n\n# Iterate over each letter an count the number of hashtags\nn_hashtags = 0\nfor letter in tweet:\n    if \"#\" == letter:\n        n_hashtags += 1\n\nprint(f\"Number of Hashtags found: {n_hashtags}\")\n</code></pre> <p>Number of Hashtags found: 2 </p>"},{"location":"program/unit-1/12-introduction-to-python/#iterating-a-range","title":"Iterating a range","text":"<pre><code># DNA sequence as a list of nucleotides\ndna_sequence = ['A', 'T', 'G', 'C', 'A']\n\n# Iterate over each position in the DNA sequence using range(10)\nfor i in range(len(dna_sequence)):\n    nucleotide = dna_sequence[i]\n    position = i + 1\n    print(f\"Position {position}: {nucleotide}\")\n</code></pre> <p>Position 1: A Position 2: T Position 3: G Position 4: C Position 5: A  </p>"},{"location":"program/unit-1/12-introduction-to-python/#enumerating-list","title":"Enumerating list","text":"<p>This example is the same from the previous one but using enumerate. Enumerate helps you iterate over a sequence (like a list, tuple, or string) while also keeping track of the index of each element in the sequence.</p> Enumerate Vs. range <p>The advantage of using enumerate instead of range in the previous code is that enumerate provides a more concise and expressive way to access both the elements and their corresponding indices in a sequence. It simplifies the code and makes it more readable.</p> <pre><code># DNA sequence as a list of nucleotides\ndna_sequence = ['A', 'T', 'G', 'C', 'A']\n\n# Iterate over each position in the DNA sequence using range(10)\nfor i, nucleotide in enumerate(dna_sequence):\n    position = i + 1\n    print(f\"Position {position}: {nucleotide}\")\n</code></pre> <p>Position 1: A Position 2: T Position 3: G Position 4: C Position 5: A  </p> Advanced for loop <p>List comprehension is a concise way to create a new list in Python by performing some operation on each item of an existing list or iterable. It allows you to combine a for loop and an expression in a single line to generate a new list efficiently. <pre><code>planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n# Example 1: Create a new list with the lengths of each planet name\nplanet_name_lengths = [len(planet) for planet in planets]\n\n# Example 2: Create a new list with uppercase planet names\nuppercase_planets = [planet.upper() for planet in planets]\n\nprint(planet_name_lengths)\nprint(uppercase_planets)\n</code></pre>  [7, 5, 5, 4, 7, 6, 6, 7] ['MERCURY', 'VENUS', 'EARTH', 'MARS', 'JUPITER', 'SATURN', 'URANUS', 'NEPTUNE']"},{"location":"program/unit-1/12-introduction-to-python/#42-while-loop","title":"4.2 While loop","text":"<p>A while loop in Python is a way to repeatedly execute a block of code as long as a certain condition is true. It keeps running the instructions until the condition becomes false, allowing you to perform tasks until a specific condition is met. </p> While Vs. for loops <p>A while loop should be used in Python when the number of iterations is not known beforehand, and the loop needs to continue as long as a certain condition remains true. It is ideal for scenarios where the loop's termination depends on real-time or user input conditions.</p> <pre><code>clothes = [\"T-shirts\", \"Jeans\", \"Dresses\", \"Jackets\", \"Shoes\", \"Hats\"]\n\n# Using a while loop to print the available clothes\nchoice = \"yes\"\ncounter = 0\n\n# Welcome print message\nprint(\"Welcome to the Fashion Clothes Store!\")\n\nwhile choice == \"yes\" and counter &lt; len(clothes):\n    print(clothes[index])\n    counter += 1\n    choice = input(\"Do you want to see more clothes? (yes/no): \")\n    choice = choice.lower()\n\nprint(\"Thank you for visiting our Fashion Clothes Store!\")\n</code></pre> <p>Welcome to the Fashion Clothes Store! T-shirts Do you want to see more clothes? (yes/no): Yes T-shirts Do you want to see more clothes? (yes/no): No Thank you for visiting our Fashion Clothes Store! </p>"},{"location":"program/unit-1/12-introduction-to-python/#-start-coding","title":"-&gt; Start coding","text":"<p>You can do the exercises in Google Colab or in Jupyter Lab</p> <p>Google Colab</p> <p>Open the 11_introduction_to_python.ipynb notebook to start doing the exercises.</p> <p>reminder</p> <p>Remember to fork the exercise repository and save your solved notebooks in your forked repo.</p> <p>Jupyter Lab</p> <p>WIP</p>"},{"location":"program/unit-1/13-introduction-to-pandas/","title":"Pandas","text":""},{"location":"program/unit-1/13-introduction-to-pandas/#1-what-is-pandas","title":"1. What is Pandas","text":"<p>A Python library is like a collection of pre-built tools or functions that we can use to perform specific tasks without writing code from scratch. In the case of pandas, it's a popular library that helps us work with data in a structured way, making it easier to analyze and manipulate data tables.</p> <p>In other words Pandas is the \"excel\" of Python.</p> <p>To import the pandas library in Python, you can use the import statement. </p> <pre><code>import pandas as pd\n</code></pre> <ul> <li><code>import</code> is the Python keyword used to import external libraries.</li> <li><code>pandas</code> is the name of the library you want to import.</li> <li><code>as pd</code> is an alias or shorthand that you can use to refer to the pandas library in your code.</li> </ul> <p>It's a common convention to use <code>pd</code> as the alias when working with pandas, but you can choose any alias you prefer.</p>"},{"location":"program/unit-1/13-introduction-to-pandas/#2-dataframe","title":"2. Dataframe","text":"<p>A DataFrame in pandas is like a super spreadsheet where you can store and work with data in rows and columns, making it easy to analyze and manipulate information.</p>"},{"location":"program/unit-1/13-introduction-to-pandas/#21-create-df-from-zero","title":"2.1 Create df from zero","text":"<pre><code># Dictionary with the data\ndata = {\n    'Model': ['Boeing 747', 'Airbus A320', 'Cessna 172', 'Embraer E190'],\n    'Manufacturer': ['Boeing', 'Airbus', 'Cessna', 'Embraer'],\n    'Passenger Capacity': [660, 220, 4, 114],\n    'Max Speed (mph)': [570, 511, 131, 541]\n}\n\n# Dataframe generation\ndf_planes = df = pd.Dataframe()\n\ndisplay(df_planes)\n</code></pre> output<pre><code>          Model Manufacturer  Passenger Capacity  Max Speed (mph)\n0    Boeing 747       Boeing                 660               570\n1  Airbus A320       Airbus                 220               511\n2    Cessna 172       Cessna                   4               131\n3  Embraer E190      Embraer                 114               541\n</code></pre>"},{"location":"program/unit-1/13-introduction-to-pandas/#22-create-df-from-a-file","title":"2.2 Create df from a file","text":"<p>Reminder</p> <p>If the file is in the same folder of the code, you don't need to write the path, just the name of the file to opern it from pandas.</p> <pre><code># Path to the CSV file\nfile_path = 'airports.csv'\n\n# Read the CSV file and create a DataFrame\nairports_df = pd.read_csv(file_path)\n\n# Display the DataFrame\ndisplay(airports_df)\n</code></pre>"},{"location":"program/unit-1/13-introduction-to-pandas/#3-exploring-operations","title":"3. Exploring operations","text":"<p>In pandas, you can use operations like head, tail, info, describe, shape, or size to explore and understand your DataFrame quickly.</p>"},{"location":"program/unit-1/13-introduction-to-pandas/#31-display-the-head-and-tail","title":"3.1 Display the head and tail","text":"<ul> <li><code>head</code>: displays the first few rows of a DataFrame.</li> <li><code>tail</code>: shows the last few rows, providing a quick overview of the data.</li> </ul> <p><pre><code>display(df_planes.head(3))\nprint(\"-----\")\ndisplay(df_planes.tail(2))\n</code></pre> output<pre><code>         Model Manufacturer  Passenger Capacity  Max Speed (mph)\n0   Boeing 747       Boeing                 660              570\n1  Airbus A320       Airbus                 220              511\n2   Cessna 172       Cessna                   4              131\n-----\n          Model Manufacturer  Passenger Capacity  Max Speed (mph)\n2    Cessna 172       Cessna                   4              131\n3  Embraer E190      Embraer                 114              541\n</code></pre></p>"},{"location":"program/unit-1/13-introduction-to-pandas/#32-get-the-size-and-shape","title":"3.2 Get the size and shape","text":"<ul> <li><code>shape</code>: returns the dimensions (rows, columns) of a DataFrame as a tuple.</li> <li><code>size</code>: returns the total number of elements (cells) in a DataFrame.</li> </ul> <p><pre><code>size = df_planes.size\nshape = df_planes.shape\n\nprint(f\"Size: {size}\")\nprint(f\"Shape: {shape}\")\n</code></pre> output<pre><code>Size: 16\nShape: (4, 4)\n</code></pre></p>"},{"location":"program/unit-1/13-introduction-to-pandas/#33-data-info-describe","title":"3.3 Data info &amp; describe","text":"<ul> <li><code>info()</code>: provides summary information about a DataFrame, including the data types, non-null counts, and memory usage of each column.</li> <li><code>describe()</code>: generates descriptive statistics, like count, mean, min, max, and quartiles, for numeric columns in a DataFrame.</li> </ul> <p><pre><code>info = df_planes.info()\ndescribe = df_planes.describe()\n\nprint(f\"Info: {info}\")\nprint(\"----------\")\nprint(f\"Describe: {describe}\")\n</code></pre> output<pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 4 entries, 0 to 3\nData columns (total 4 columns):\n #   Column              Non-Null Count  Dtype \n---  ------              --------------  ----- \n 0   Model               4 non-null      object\n 1   Manufacturer        4 non-null      object\n 2   Passenger Capacity  4 non-null      int64 \n 3   Max Speed (mph)     4 non-null      int64 \ndtypes: int64(2), object(2)\nmemory usage: 256.0+ bytes\nInfo: None\n----------\nDescribe:        Passenger Capacity  Max Speed (mph)\ncount            4.000000         4.000000\nmean           249.500000       438.250000\nstd            287.524492       206.244798\nmin              4.000000       131.000000\n25%             86.500000       416.000000\n50%            167.000000       526.000000\n75%            330.000000       548.250000\nmax            660.000000       570.000000\n</code></pre></p>"},{"location":"program/unit-1/13-introduction-to-pandas/#4-extracting-operations","title":"4. Extracting operations","text":"<p>These operations allow the user to retrieve specific columns or rows from a DataFrame for analysis and manipulation.</p>"},{"location":"program/unit-1/13-introduction-to-pandas/#41-extract-a-column","title":"4.1 Extract a column","text":"<pre><code># Extract the 'Age' column\nplanes = df_planes['Model']\n\nprint(planes)\n</code></pre> output<pre><code>0      Boeing 747\n1     Airbus A320\n2      Cessna 172\n3    Embraer E190\nName: Model, dtype: object\n</code></pre>"},{"location":"program/unit-1/13-introduction-to-pandas/#43-extract-multiple-columns","title":"4.3 Extract multiple columns","text":"<pre><code># Selecting the columns\nselected_columns = df_planes[['Model', 'Max Speed (mph)']]\n\n# Printing the selected columns\nprint(selected_columns)\n</code></pre> output<pre><code>          Model  Max Speed (mph)\n0    Boeing 747              570\n1   Airbus A320              511\n2    Cessna 172              131\n3  Embraer E190              541\n</code></pre>"},{"location":"program/unit-1/13-introduction-to-pandas/#44-extract-a-row-by-index","title":"4.4 Extract a row by index","text":"<pre><code># Extracting a row by index using iloc\nrow_at_index_2 = df_planes.iloc[2]\n\n# Printing the extracted row\nprint(row_at_index_2)\n</code></pre> output<pre><code>Model                 Cessna 172\nManufacturer              Cessna\nPassenger Capacity             4\nMax Speed (mph)              131\nName: 2, dtype: object\n</code></pre>"},{"location":"program/unit-1/13-introduction-to-pandas/#45-extract-a-row-by-condition","title":"4.5 Extract a row by condition","text":"<p>Suppose you want to extract all rows where the speed is greater than 200 mph.</p> <pre><code># Extracting rows with speed &gt; 200 mph\ndf_fast_planes = df_planes[df_planes['Max Speed (mph)'] &gt; 200]\n\n# Printing the extracted rows\nprint(df_fast_planes)\n</code></pre> output<pre><code>          Model Manufacturer  Passenger Capacity  Max Speed (mph)\n0    Boeing 747       Boeing                 660              570\n1   Airbus A320       Airbus                 220              511\n3  Embraer E190      Embraer                 114              541\n</code></pre>"},{"location":"program/unit-1/13-introduction-to-pandas/#5-edit-columns-rows","title":"5. Edit columns &amp; rows","text":""},{"location":"program/unit-1/13-introduction-to-pandas/#51-add-a-new-column","title":"5.1 Add a new column","text":"<p>To add a new column to a pandas DataFrame, you can simply assign a list or a Series to a new column name. Remember to add a column with the same amount of rows of the dataframe.</p> <pre><code># List of lengths in meters\nlengths_in_meters = [70.6, 37.6, 8.2, 36.2]\n\n# Add a new column named \"Length (m)\" to df with the length values\ndf_planes['Length'] = lengths_in_meters\n\n# Print the updated DataFrame\nprint(df_planes)\n</code></pre> output<pre><code>          Model Manufacturer  Passenger Capacity  Max Speed (mph)      Length\n0    Boeing 747       Boeing                 660              570        70.6\n1   Airbus A320       Airbus                 220              511        37.6\n2    Cessna 172       Cessna                   4              131         8.2\n3  Embraer E190      Embraer                 114              541        36.2\n</code></pre>"},{"location":"program/unit-1/13-introduction-to-pandas/#52-rename-a-column","title":"5.2 Rename a column","text":"<pre><code># Rename the \"Lenght\" column to \"Length (m)\"\ndf_planes.rename(columns={'Length': 'Length (m)'}, inplace=True)\n\n# Print the updated DataFrame\nprint(df_planes)\n</code></pre> output<pre><code>          Model Manufacturer  Passenger Capacity  Max Speed (mph)  Length (m)\n0    Boeing 747       Boeing                 660              570        70.6\n1   Airbus A320       Airbus                 220              511        37.6\n2    Cessna 172       Cessna                   4              131         8.2\n3  Embraer E190      Embraer                 114              541        36.2\n</code></pre>"},{"location":"program/unit-1/13-introduction-to-pandas/#6-aggregate-operations","title":"6. Aggregate operations","text":"<p>Imagine you have a database with hacker attacks.</p> datetime ip_source location type_of_attack severity duration_minutes 2023-04-10 08:15:00 192.168.1.100 Madrid DDoS High 45 2023-04-10 12:45:00 203.54.32.17 Los Angeles Phishing Medium 30 2023-04-11 14:30:00 104.23.45.67 London SQL Injection Low 60 2023-04-12 20:10:00 45.76.12.34 Singapore Malware High 90 2023-04-10 16:03:00 203.54.32.17 Los Angeles Phishing Medium 30"},{"location":"program/unit-1/13-introduction-to-pandas/#61-unique-values","title":"6.1 Unique values","text":"<pre><code>unique_attack_types = df_attacks['type_of_attack'].unique()\nprint(unique_attack_types)\n</code></pre> output<pre><code>['DDoS' 'Phishing' 'SQL Injection' 'Malware']\n</code></pre>"},{"location":"program/unit-1/13-introduction-to-pandas/#62-count-unique-values","title":"6.2 Count unique values","text":"<pre><code>unique_attack_count = df_attacks['type_of_attack'].nunique()\nprint(unique_attack_count)\n</code></pre> output<pre><code>4\n</code></pre>"},{"location":"program/unit-1/13-introduction-to-pandas/#63-count-elements-in-a-column","title":"6.3 Count elements in a column","text":"<pre><code>element_count = df_attacks['datetime'].count()\nprint(element_count)\n</code></pre> output<pre><code>5\n</code></pre>"},{"location":"program/unit-1/13-introduction-to-pandas/#64-math-operators","title":"6.4 Math operators","text":"Operator Statement Mean df[\"column\"].mean() Median df[\"column\"].median() Standar deviation df[\"column\"].std() Max value df[\"column\"].max() Min value df[\"column\"].min() <pre><code>element_count = df_attacks['duration_minutes'].mean()\nprint(element_count)\n</code></pre> output<pre><code>51.0\n</code></pre>"},{"location":"program/unit-1/13-introduction-to-pandas/#7-groping-operations","title":"7. Groping Operations","text":"<p>Grouping operations in pandas involve splitting a DataFrame into groups based on one or more columns, applying a function to each group, and then combining the results into a new DataFrame.</p> <p>.reset_index()</p> <p>Using reset_index() after grouping operations is important to reset the index labels and make the resulting DataFrame more structured and easier to work with.</p>"},{"location":"program/unit-1/13-introduction-to-pandas/#71-group-rows-counting","title":"7.1 Group rows counting","text":"<pre><code># Grouping by 'type_of_attack' and counting elements in each group\ndf_types_of_attack = df_attacks.groupby('type_of_attack').count()\n\nprint(df_types_of_attack)\n</code></pre> output<pre><code>type_of_attack\nDDoS             1\nMalware          1\nPhishing         2\nSQL Injection    1\nName: ip_source, dtype: int64\n</code></pre>"},{"location":"program/unit-1/13-introduction-to-pandas/#72-group-rows-operating","title":"7.2 Group rows operating","text":"<pre><code>mean_by_severity = df_attacks.groupby('severity')['duration_minutes'].mean()\n\nprint(mean_by_severity)\n</code></pre> output<pre><code>severity\nHigh      67.5\nLow       60.0\nMedium    30.0\nName: duration_minutes, dtype: float64\n</code></pre>"},{"location":"program/unit-1/13-introduction-to-pandas/#8-other-operations","title":"8. Other operations","text":""},{"location":"program/unit-1/13-introduction-to-pandas/#81-ordering-rows-of-a-dataframe","title":"8.1 Ordering rows of a dataframe","text":"<pre><code># Sorting the DataFrame by 'Location'\ndf_sorted = df_attacks.sort_values(by='location')\n\nprint(df_sorted[['ip_source', 'location']])\n</code></pre> output<pre><code>       ip_source     location\n2   104.23.45.67       London\n4   203.54.32.17  Los Angeles\n1   203.54.32.17       Madrid\n0  192.168.1.100     New York\n3    45.76.12.34    Singapore\n</code></pre>"},{"location":"program/unit-1/13-introduction-to-pandas/#82-joining-two-dataframes","title":"8.2 Joining two dataframes","text":"<pre><code>data_attacks_update = {'datetime': ['2023-04-10 08:15:00', '2023-04-10 12:45:00', '2023-04-11 14:30:00'],\n        'ip_source': ['192.168.1.100', '203.54.32.17', '104.23.45.67'],\n        'location': ['New York', 'Madrid', 'London'],\n        'type_of_attack': ['DDoS', 'Phishing', 'SQL Injection'],\n        'severity': ['High', 'Medium', 'Low'],\n        'duration_minutes': [45, 30, 60]}\n\ndf_update = pd.DataFrame(data_attacks_update)\ndf_total_atacks = pd.concat([df_attacks, df_update])\nprint(df_total_atacks)\n</code></pre> output<pre><code>    datetime            ip_source       location    type_of_attack  severity    duration_minutes\n0   2023-04-10 08:15:00 192.168.1.100   New York    DDoS            High    45\n1   2023-04-10 12:45:00 203.54.32.17    Madrid      Phishing        Medium  30\n2   2023-04-11 14:30:00 104.23.45.67    London      SQL Injection   Low 60\n3   2023-04-12 20:10:00 45.76.12.34     Singapore   Malware         High    90\n4   2023-04-10 16:03:00 203.54.32.17    Los Angeles Phishing        Medium  30\n0   2023-04-10 08:15:00 192.168.1.100   New York    DDoS            High    45\n1   2023-04-10 12:45:00 203.54.32.17    Madrid      Phishing        Medium  30\n2   2023-04-11 14:30:00 104.23.45.67    London      SQL Injection   Low 60\n</code></pre>"},{"location":"program/unit-1/13-introduction-to-pandas/#-start-coding","title":"-&gt; Start coding","text":"<p>You can do the exercises in Google Colab or in Jupyter Lab</p> <p>Google Colab</p> <p>Open the 12_introduction_to_pandas.ipynb notebook to start doing the exercises.</p> <p>reminder</p> <p>Remember to fork the exercise repository and save your solved notebooks in your forked repo.</p> <p>Jupyter Lab</p> <p>WIP</p>"},{"location":"program/unit-1/14-practice-with-python-and-pandas/","title":"Under construction","text":"<p>This site is being developed</p>"},{"location":"program/unit-1/15-dialogue-with-a-professional/","title":"Under construction","text":"<p>This site is being developed</p>"},{"location":"program/unit-2/21-current-context-and-application-of-mathematical-models-in-ai/","title":"Under construction","text":"<p>This site is being developed</p>"},{"location":"program/unit-2/22-introduction-to-visualization-and-descriptive-statistics/","title":"Under construction","text":"<p>This site is being developed</p>"},{"location":"program/unit-2/23-introduction-to-exploratory-data-analysis-eda/","title":"Under construction","text":"<p>This site is being developed</p>"},{"location":"program/unit-2/24-data-cleaning-and-processing/","title":"Under construction","text":"<p>This site is being developed</p>"},{"location":"program/unit-2/25-dialogue-with-a-professional/","title":"Under construction","text":"<p>This site is being developed</p>"}]}